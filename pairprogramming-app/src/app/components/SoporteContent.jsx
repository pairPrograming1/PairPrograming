// components/SoporteContent.jsx
"use client";
import { useState, useRef, useEffect } from "react";
import { useSidebar } from "../context/SidebarContext";
import { Container } from "./ui/Container";
import { Card } from "./ui/Card";
import { Button } from "./ui/Button";
import { Input } from "./ui/Input";

export default function SoporteContent() {
  const { isSidebarExpanded } = useSidebar();
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "¬°Hola! üëã Soy **Carlos**, tu especialista de soporte t√©cnico. ¬øEn qu√© puedo ayudarte hoy?",
      sender: "agent",
      timestamp: new Date(),
      agent: "Carlos Rodr√≠guez",
      role: "Especialista en Soporte T√©cnico",
    },
  ]);
  const [inputMessage, setInputMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [ticketNumber, setTicketNumber] = useState(null);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
    // Generar n√∫mero de ticket al cargar
    if (!ticketNumber) {
      setTicketNumber(`TKT-${Date.now().toString().slice(-6)}`);
    }
  }, [messages, ticketNumber]);

  const commonIssues = [
    "Problemas con el servidor",
    "Error en la aplicaci√≥n",
    "Consulta sobre facturaci√≥n",
    "Problema de rendimiento",
    "Solicitud de nuevas funciones",
    "Problema de integraci√≥n",
  ];

  const supportAgents = [
    {
      name: "Carlos Rodr√≠guez",
      role: "Especialista en Soporte T√©cnico",
      expertise: ["Backend", "APIs", "Servidores"],
      status: "En l√≠nea",
      avatar: "üë®‚Äçüíª",
    },
    {
      name: "Ana Mart√≠nez",
      role: "Especialista en Frontend",
      expertise: ["React", "UI/UX", "Performance"],
      status: "Disponible",
      avatar: "üë©‚Äçüíª",
    },
    {
      name: "David Chen",
      role: "Especialista en DevOps",
      expertise: ["Infraestructura", "CI/CD", "Cloud"],
      status: "En l√≠nea",
      avatar: "üë®‚Äçüîß",
    },
  ];

  const handleQuickIssue = (issue) => {
    setInputMessage("");
    handleSendMessage(null, issue);
  };

  const handleSendMessage = (e, quickIssue = null) => {
    e?.preventDefault();
    const messageText = quickIssue || inputMessage;

    if (!messageText.trim()) return;

    // Add user message
    const userMessage = {
      id: Date.now(),
      text: messageText,
      sender: "user",
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputMessage("");
    setIsTyping(true);

    // Simulate agent typing and response
    setTimeout(() => {
      setIsTyping(false);

      const currentAgent = supportAgents[0]; // Carlos responde por defecto
      let responseText = "";

      // Respuestas basadas en el tipo de problema
      if (
        messageText.toLowerCase().includes("servidor") ||
        messageText.toLowerCase().includes("server")
      ) {
        responseText = `He revisado nuestros registros y veo que los servidores est√°n funcionando correctamente. ¬øPodr√≠as proporcionarme m√°s detalles sobre el error que est√°s experimentando?\n\n‚Ä¢ ¬øQu√© mensaje de error espec√≠fico ves?\n‚Ä¢ ¬øEn qu√© entorno ocurre (producci√≥n, desarrollo)?\n‚Ä¢ ¬øDesde cu√°ndo est√° ocurriendo esto?`;
      } else if (
        messageText.toLowerCase().includes("error") ||
        messageText.toLowerCase().includes("bug")
      ) {
        responseText = `Entiendo que est√°s experimentando un error. Para ayudarte mejor:\n\n1. ¬øPodr√≠as compartir los pasos espec√≠ficos para reproducir el error?\n2. ¬øHay alg√∫n mensaje de error en la consola?\n3. ¬øEn qu√© navegador y versi√≥n ocurre?\n\nTambi√©n puedes revisar nuestra documentaci√≥n de soluci√≥n de problemas.`;
      } else if (
        messageText.toLowerCase().includes("factura") ||
        messageText.toLowerCase().includes("pago")
      ) {
        responseText = `Puedo ayudarte con temas de facturaci√≥n. He verificado tu cuenta y todo parece estar en orden.\n\n‚Ä¢ Pr√≥xima facturaci√≥n: ${new Date(
          Date.now() + 30 * 24 * 60 * 60 * 1000
        ).toLocaleDateString(
          "es-ES"
        )}\n‚Ä¢ M√©todo de pago actual: Tarjeta de cr√©dito\n‚Ä¢ Plan: Professional\n\n¬øHay algo espec√≠fico sobre tu facturaci√≥n que te preocupe?`;
      } else if (
        messageText.toLowerCase().includes("lento") ||
        messageText.toLowerCase().includes("rendimiento")
      ) {
        responseText = `Comprendo tu preocupaci√≥n sobre el rendimiento. Algunas acciones que puedes tomar:\n\n‚Ä¢ Limpiar cache del navegador\n‚Ä¢ Verificar tu conexi√≥n a internet\n‚Ä¢ Revisar si hay actualizaciones pendientes\n\n¬øPodr√≠as decirme qu√© acci√≥n espec√≠fica est√° siendo lenta?`;
      } else if (
        messageText.toLowerCase().includes("funci√≥n") ||
        messageText.toLowerCase().includes("feature")
      ) {
        responseText = `¬°Me encanta escuchar nuevas ideas! He registrado tu solicitud en nuestro sistema de seguimiento.\n\n**Ticket: ${ticketNumber}**\nCategor√≠a: Nueva Funci√≥n\nPrioridad: Media\n\n¬øTe gustar√≠a agregar m√°s detalles sobre esta funcionalidad?`;
      } else {
        responseText = `Gracias por tu mensaje. He registrado tu consulta en nuestro sistema con el ticket **${ticketNumber}**.\n\nUn miembro de nuestro equipo revisar√° tu caso y te contactar√° si necesitamos informaci√≥n adicional. Mientras tanto, ¬øhay algo m√°s en lo que pueda ayudarte?`;
      }

      const agentMessage = {
        id: Date.now() + 1,
        text: responseText,
        sender: "agent",
        timestamp: new Date(),
        agent: currentAgent.name,
        role: currentAgent.role,
      };

      setMessages((prev) => [...prev, agentMessage]);
    }, 2000);
  };

  const formatMessage = (text) => {
    return text.split("**").map((part, index) => {
      return index % 2 === 1 ? (
        <strong key={index} className="text-primary">
          {part}
        </strong>
      ) : (
        part
      );
    });
  };

  const formatMessageWithBreaks = (text) => {
    return text.split("\n").map((line, index) => (
      <div key={index}>
        {formatMessage(line)}
        {index < text.split("\n").length - 1 && <br />}
      </div>
    ));
  };

  const downloadChatHistory = () => {
    const chatText = messages
      .map((msg) => {
        const sender = msg.sender === "user" ? "T√∫" : msg.agent;
        const time = msg.timestamp.toLocaleTimeString("es-ES");
        return `[${time}] ${sender}: ${msg.text}`;
      })
      .join("\n\n");

    const blob = new Blob([chatText], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `soporte-${ticketNumber}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <section className="py-16 lg:py-20 bg-card-bg text-white min-h-screen">
      <Container size={isSidebarExpanded ? "expanded" : "default"}>
        <div className="text-center mb-8 fade-in">
          <h1
            className={`font-bold mb-4 bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent transition-all duration-300 ${
              isSidebarExpanded
                ? "text-2xl lg:text-3xl"
                : "text-3xl lg:text-4xl"
            }`}
          >
            Soporte T√©cnico
          </h1>
          <p className="text-secondary-text max-w-2xl mx-auto text-lg">
            Estamos aqu√≠ para ayudarte. Chatea con nuestro equipo de
            especialistas.
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 lg:gap-8">
          {/* Panel de informaci√≥n del ticket */}
          <div className="lg:col-span-1 space-y-6">
            <Card padding="md" className="sticky top-4">
              <h3 className="text-lg font-bold text-primary mb-4">
                Informaci√≥n del Ticket
              </h3>
              <div className="space-y-3 text-sm">
                <div className="flex justify-between">
                  <span className="text-secondary-text">Ticket:</span>
                  <span className="font-mono text-primary">{ticketNumber}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-secondary-text">Estado:</span>
                  <span className="text-green-400">‚óè En Progreso</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-secondary-text">Creado:</span>
                  <span>{new Date().toLocaleDateString("es-ES")}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-secondary-text">
                    Tiempo de respuesta:
                  </span>
                  <span className="text-green-400">Inmediato</span>
                </div>
              </div>
            </Card>

            <Card padding="md">
              <h3 className="text-lg font-bold text-primary mb-4">
                Equipo de Soporte
              </h3>
              <div className="space-y-4">
                {supportAgents.map((agent, index) => (
                  <div
                    key={index}
                    className="flex items-center space-x-3 p-2 rounded-lg bg-background/50"
                  >
                    <div className="text-2xl">{agent.avatar}</div>
                    <div className="flex-1 min-w-0">
                      <p className="font-semibold text-white text-sm">
                        {agent.name}
                      </p>
                      <p className="text-secondary-text text-xs">
                        {agent.role}
                      </p>
                      <p className="text-green-400 text-xs">‚óè {agent.status}</p>
                    </div>
                  </div>
                ))}
              </div>
            </Card>
          </div>

          {/* Chat principal */}
          <div className="lg:col-span-3">
            <Card padding="md" className="h-[600px] flex flex-col">
              {/* Header del chat */}
              <div className="flex items-center justify-between pb-4 border-b border-border-color mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-primary/20 rounded-full flex items-center justify-center">
                    <span className="text-primary">üë®‚Äçüíª</span>
                  </div>
                  <div>
                    <h3 className="font-bold text-white">Soporte T√©cnico</h3>
                    <p className="text-secondary-text text-sm">
                      Ticket: {ticketNumber}
                    </p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-green-400 text-sm">‚óè En l√≠nea</p>
                  <p className="text-secondary-text text-xs">
                    Tiempo de respuesta: 2 min
                  </p>
                </div>
              </div>

              {/* √Årea de mensajes */}
              <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-background/30 rounded-lg mb-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${
                      message.sender === "user"
                        ? "justify-end"
                        : "justify-start"
                    }`}
                  >
                    <div
                      className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${
                        message.sender === "user"
                          ? "bg-primary text-white rounded-br-none"
                          : "bg-card-bg text-foreground rounded-bl-none border border-border-color"
                      }`}
                    >
                      {message.sender === "agent" && (
                        <div className="flex items-center space-x-2 mb-2">
                          <span className="text-xs font-semibold text-primary">
                            {message.agent}
                          </span>
                          <span className="text-xs text-secondary-text">
                            {message.role}
                          </span>
                        </div>
                      )}
                      <div className="text-sm leading-relaxed">
                        {formatMessageWithBreaks(message.text)}
                      </div>
                      <div
                        className={`text-xs mt-2 ${
                          message.sender === "user"
                            ? "text-primary/80"
                            : "text-secondary-text"
                        }`}
                      >
                        {message.timestamp.toLocaleTimeString("es-ES", {
                          hour: "2-digit",
                          minute: "2-digit",
                        })}
                      </div>
                    </div>
                  </div>
                ))}

                {/* Typing Indicator */}
                {isTyping && (
                  <div className="flex justify-start">
                    <div className="bg-card-bg text-foreground px-4 py-3 rounded-2xl rounded-bl-none border border-border-color">
                      <div className="flex items-center space-x-2">
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                          <div
                            className="w-2 h-2 bg-primary rounded-full animate-bounce"
                            style={{ animationDelay: "0.1s" }}
                          ></div>
                          <div
                            className="w-2 h-2 bg-primary rounded-full animate-bounce"
                            style={{ animationDelay: "0.2s" }}
                          ></div>
                        </div>
                        <span className="text-secondary-text text-xs">
                          Carlos est√° escribiendo...
                        </span>
                      </div>
                    </div>
                  </div>
                )}

                <div ref={messagesEndRef} />
              </div>

              {/* Problemas comunes */}
              <div className="mb-4">
                <p className="text-secondary-text text-sm mb-2">
                  Problemas comunes:
                </p>
                <div className="flex flex-wrap gap-2">
                  {commonIssues.map((issue, index) => (
                    <button
                      key={index}
                      onClick={() => handleQuickIssue(issue)}
                      className="text-xs bg-background hover:bg-hover-bg text-secondary-text border border-border-color px-3 py-1 rounded-full transition-colors hover:text-primary hover:border-primary"
                    >
                      {issue}
                    </button>
                  ))}
                </div>
              </div>

              {/* Input de mensaje */}
              <form
                onSubmit={handleSendMessage}
                className="flex space-x-2 mb-4"
              >
                <Input
                  value={inputMessage}
                  onChange={(e) => setInputMessage(e.target.value)}
                  placeholder="Escribe tu mensaje..."
                  className="flex-1"
                />
                <Button
                  type="submit"
                  disabled={!inputMessage.trim() || isTyping}
                  className="flex-shrink-0"
                >
                  Enviar
                </Button>
              </form>

              {/* Acciones R√°pidas - MOVIDO AQU√ç ABAJO */}
              <div className="border-t border-border-color pt-4">
                <h4 className="text-sm font-semibold text-white mb-3">
                  Acciones R√°pidas
                </h4>
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    className="w-full justify-center text-xs"
                    onClick={downloadChatHistory}
                    icon="üíæ"
                  >
                    Descargar Chat
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="w-full justify-center text-xs"
                    href="/faq"
                    icon="üìö"
                  >
                    Ver FAQ
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="w-full justify-center text-xs"
                    href="/calendario"
                    icon="üìÖ"
                  >
                    Agendar Reuni√≥n
                  </Button>
                </div>
              </div>
            </Card>

            {/* Informaci√≥n adicional */}
            <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
              <Card padding="sm" className="bg-primary/10 border-primary/20">
                <div className="text-2xl mb-2">‚è±Ô∏è</div>
                <h4 className="font-semibold text-white text-sm">
                  Respuesta R√°pida
                </h4>
                <p className="text-secondary-text text-xs">
                  Menos de 5 minutos
                </p>
              </Card>
              <Card padding="sm" className="bg-primary/10 border-primary/20">
                <div className="text-2xl mb-2">üë®‚Äçüíª</div>
                <h4 className="font-semibold text-white text-sm">
                  Expertos T√©cnicos
                </h4>
                <p className="text-secondary-text text-xs">
                  Equipo especializado
                </p>
              </Card>
              <Card padding="sm" className="bg-primary/10 border-primary/20">
                <div className="text-2xl mb-2">üìä</div>
                <h4 className="font-semibold text-white text-sm">
                  Seguimiento
                </h4>
                <p className="text-secondary-text text-xs">
                  Ticket: {ticketNumber}
                </p>
              </Card>
            </div>
          </div>
        </div>
      </Container>
    </section>
  );
}
